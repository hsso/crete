      SUBROUTINE getinputs
     $  (molfile,modelfile,outfile,goal,nphot_user,fixset,trace)

c (c) Michiel Hogerheijde / Floris van der Tak 2000
c     michiel@strw.leidenuniv.nl, vdtak@sron.nl
c     http://www.sron.rug.nl/~vdtak/ratran/
c
c     This file is part of the 'ratran' molecular excitation and
c     radiative transfer code. The one-dimensional version of this code
c     is publicly available; the two-dimensional version is available on
c     collaborative basis. Although the code has been thoroughly tested,
c     the authors do not claim that it is free of errors or that it gives
c     correct results in all situations. Any publication making use of
c     this code should include a reference to Hogerheijde & van der Tak,
c     2000, A&A, 362, 697.

c     For revision history see http://www.sron.rug.nl/~vdtak/ratran/

c     Reads the input keywords, which are generated by the csh script.

      IMPLICIT NONE
      INCLUDE 'amccommon.inc'
      INTEGER length,i,j,nphot_user
      DOUBLE PRECISION goal,planck,fixset
      EXTERNAL planck
      CHARACTER*80 molfile,modelfile,outfile
      CHARACTER*3 traceflag
      CHARACTER*200 line,keyw,valu
      EXTERNAL length
      LOGICAL trace
      LOGICAL debug
      PARAMETER(debug=.false.)

c     length:       function that returns length of character string
c     i,j:          counter
c     nphot_user:   initial number of photons in each cell
c     goal:         requested S/N value
c     molfile:      molecular data file
c     modelfile:    input model file
c     outfile:      output file
c     line:         reads input line
c     keyw:         keyword as split off from line
c     valu:         value as split off from line
c     fixset:       relative accuracy required for fixset stage
c     trace:        should convergence history be written?
c     traceflag:    on or off
c     debug: turns debugging output on/off


      molfile=' '                 ! Initial settings
      modelfile=' '
      outfile='amc.out'
      goal=0
      seed=-1
      minpop=1.d-6
      nphot_user=0
      tnorm=0
      trace=.false.
      traceflag='off'

   10 read(*,'(A200)',end=100) line ! Read from standard input

      do i=1,200                ! Split line in keyw and valu
        if (line(i:i).eq.'=') then
          do j=i+1,200
            if (line(j:j).eq.' ') goto 20
          enddo
          j=201
          goto 20
        endif
      enddo
      write(*,'(A)') 'AMC: cannot understand input'
      write(*,'(A)') line
      write(*,'(A)') 'AMC: skipping...'
      goto 10
   20 keyw=line(1:i-1)
      valu=line(i+1:j-1)
      if (valu(1:1).eq.' ') then
        write(*,'(A)') 'AMC: cannot understand input'
        write(*,'(A)') line
        write(*,'(A)') 'AMC: skipping...'
        goto 10
      endif


c     Search keywords

      if (keyw(1:7).eq.'molfile') molfile=valu(1:length(valu))
      if (keyw(1:6).eq.'source') modelfile=valu(1:length(valu))
      if (keyw(1:7).eq.'outfile') outfile=valu(1:length(valu))
      if (keyw(1:3).eq.'snr') read(valu,*) goal
      if (keyw(1:4).eq.'seed') read(valu,*) seed
      if (keyw(1:6).eq.'minpop') read(valu,*) minpop
      if (keyw(1:5).eq.'nphot') read(valu,*) nphot_user
      if (keyw(1:5).eq.'tnorm') read(valu,*) tnorm
      if (keyw(1:6).eq.'fixset') read(valu,*) fixset
      if (keyw(1:5).eq.'trace') traceflag=valu(1:length(valu))
      
      goto 10                   ! Next line/keyword

      if (debug) print*,'[debug] read keyword file'

c     Check on validity after all lines read

  100 if (molfile.eq.' ') stop '<molfile> missing...abort'
      if (modelfile.eq.' ') stop '<source> missing...abort'
      if (goal.le.0.) stop '<snr> missing or <=0...abort'
      if (seed.le.0.) stop '<seed> missing or <=0...abort'
      if (minpop.le.0.) stop '<minpop> missing or <=0...abort'
      if (nphot_user.lt.0) stop '<nphot> < 0...abort'
      if (fixset.lt.0) stop '<fixset> < 0...abort'

      if (tnorm.lt.eps) tnorm=tcmb
      if (tnorm.lt.eps) tnorm=2.735d0

      if (fixset.lt.eps) fixset=eps ! smallest difference for stateq

      if (traceflag(1:2).eq.'on') trace=.true.

      RETURN
      END
